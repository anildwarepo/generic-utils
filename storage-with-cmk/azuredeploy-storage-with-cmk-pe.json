{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
      "_generator": {
        "name": "bicep",
        "version": "0.5.6.12127",
        "templateHash": "16023511331197397029"
      }
    },
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "The location into which the resources should be deployed."
        }
      },
      "tenantId": {
        "type": "string",
        "defaultValue": "[subscription().tenantId]",
        "metadata": {
          "description": "The Tenant Id that should be used throughout the deployment."
        }
      },
      "userAssignedIdentityName": {
        "type": "string",
        "defaultValue": "cmk-mi",
        "metadata": {
          "description": "The name of the existing User Assigned Identity."
        }
      },
      "userAssignedIdentityResourceGroupName": {
        "type": "string",
        "defaultValue": "cmk-test",
        "metadata": {
          "description": "The name of the resource group for the User Assigned Identity."
        }
      },
      "keyVaultName": {
        "type": "string",
        "defaultValue": "[format('kv-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Key Vault."
        }
      },
      "keyVaultKeyName": {
        "type": "string",
        "defaultValue": "cmkey",
        "metadata": {
          "description": "Name of the key in the Key Vault"
        }
      },
      "keyExpiration": {
        "type": "int",
        "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1Y'))]",
        "metadata": {
          "description": "Expiration time of the key"
        }
      },
      "storageAccountName": {
        "type": "string",
        "defaultValue": "[format('storage{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Storage Account"
        }
      },
      "keyvaultPrivateEndpointName": {
          "type": "string",
          "defaultValue": "KeyVaultPrivateEndpoint",
          "metadata": {
              "description": "Specifies the name of the private link to the key vault."
          }
      },
      "currentUserAADObjectId": {
          "type": "string",
          "metadata": {
              "description": "az ad user show --id someone@example.com --query objectId"
          }
      },
      "vnetNameRgName": {
            "type": "String",
            "defaultValue": "vnet",
            "metadata": {
                "description": "The name of the resource group containing the virtual network for virtual network integration."
            }
      },
      "vnetName": {
        "type": "string",
        "defaultValue": "vnet-west-us2",
        "metadata": {
          "description": "The name of the virtual network for virtual network integration."
        }
      },
      "privateEndpointSubnetName": {
        "type": "string",
        "defaultValue": "subnet-pe",
        "metadata": {
          "description": "The name of the virtual network subnet used for allocating IP addresses for private endpoints."
        }
      },
      "keyvaultPrivateDNSZoneResourceGroupName": {
			"type": "string",
      "defaultValue": "privatednszone-rg",
			"metadata": {
				"description": "Resource group name where privatelink.vaultcore.azure.net Private DNS Zone exists"
			}
		},
     "blobPrivateDNSZoneResourceGroupName": {
			"type": "string",
      "defaultValue": "privatednszone-rg",
			"metadata": {
				"description": "Resource group name where privatelink.blob.core.windows.net Private DNS Zone exists"
			}
		}
    },

    "variables" : {
        "keyvaultPrivateEndpointGroupName": "vault",
        "keyvaultPrivateDnsZoneName": "privatelink.vaultcore.azure.net",
        "privateEndpointStorageBlobName": "[format('{0}-blob-private-endpoint', parameters('storageAccountName'))]",
        "privateStorageBlobDnsZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
    },

    "resources": [
      {
        "type": "Microsoft.KeyVault/vaults",
        "apiVersion": "2019-09-01",
        "name": "[parameters('keyVaultName')]",
        "location": "[parameters('location')]",
        "properties": {
          "sku": {
            "name": "standard",
            "family": "A"
          },
          "enableSoftDelete": true,
          "enablePurgeProtection": true,
          "publicNetworkAccess": "Disabled",
          "allowBlobPublicAccess": false,
          "networkAcls": {
            "bypass": "AzureServices",
            "defaultAction": "Deny"
          },
          "tenantId": "[parameters('tenantId')]",
          "accessPolicies": []
        },
        "resources":[
          {
            "type": "accessPolicies",
            "apiVersion": "2016-10-01",
            "name": "add",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "[parameters('keyVaultName')]"
            ],
            "properties": {
              "accessPolicies": [
                {
                  "tenantId": "[parameters('tenantId')]",
                  "permissions": {
                    "keys": [
                      "unwrapKey",
                      "wrapKey",
                      "get",
                      "create",
                      "update"]
                  },
                  "objectId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2018-11-30').principalId]"
                },
                {
                  "tenantId": "[parameters('tenantId')]",
                  "permissions": {
                    "keys": [
                      "unwrapKey",
                      "wrapKey",
                      "list",
                      "get",
                      "create",
                      "update"]
                  },
                  "objectId": "19dd504a-49a2-4e4e-a4ac-a0b783e54053"
                },
                {
                  "tenantId": "[parameters('tenantId')]",
                  "permissions": {
                    "keys": [
                      "unwrapKey",
                      "wrapKey",
                      "list",
                      "get",
                      "create",
                      "update"]
                  },
                  "objectId": "[parameters('currentUserAADObjectId')]"
                }
              ]
            }
          }
        ]
      },
      {
        "type": "Microsoft.KeyVault/vaults/keys",
        "apiVersion": "2021-10-01",
        "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('keyVaultKeyName'))]",
        "properties": {
          "attributes": {
            "enabled": true,
            "exp": "[parameters('keyExpiration')]"
          },
          "keySize": 4096,
          "kty": "RSA"
        },
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
        ]
      },
      {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-04-01",
            "name": "[parameters('keyvaultPrivateEndpointName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyVaultKeyName'))]"
            ],
            "properties": {
                "privateLinkServiceConnections": [
                {
                    "name": "[parameters('keyvaultPrivateEndpointName')]",
                    "properties": {
                    "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                    "groupIds": [
                        "[variables('keyvaultPrivateEndpointGroupName')]"
                    ]
                    }
                }
                ],
                "subnet": {
                "id": "[resourceId(parameters('vnetNameRgName'),'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
                },
                "customDnsConfigs": [
                {
                    "fqdn": "[concat(parameters('keyVaultName'), '.vault.azure.net')]"
                }
                ]
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-05-01",
            "name": "[format('{0}/{1}', parameters('keyvaultPrivateEndpointName'), 'keyvaultPrivateDnsZoneGroup')]",
            "properties": {
                "privateDnsZoneConfigs": [
                {
                    "name": "config",
                    "properties": {
                    "privateDnsZoneId": "[resourceId(parameters('keyvaultPrivateDNSZoneResourceGroupName'),'Microsoft.Network/privateDnsZones', variables('keyvaultPrivateDnsZoneName'))]"
                    }
                }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyvaultPrivateEndpointName'))]"
            ]
        },
        {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2021-04-01",
        "name": "[parameters('storageAccountName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "StorageV2",
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "[format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
          }
        },
        "properties": {
          "publicNetworkAccess": "Disabled",
          "allowBlobPublicAccess": false,
          "networkAcls": {
            "bypass": "None",
            "defaultAction": "Deny"
          },
          "accessTier": "Hot",
          "supportsHttpsTrafficOnly": true,
          "minimumTlsVersion": "TLS1_2",
          "encryption": {
            "identity": {
              "userAssignedIdentity": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
            },
            "services": {
              "blob": {
                "enabled": true
              }
            },
            "keySource": "Microsoft.Keyvault",
            "keyvaultproperties": {
              "keyname": "[parameters('keyVaultKeyName')]",
              "keyvaulturi": "[if(endsWith(reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))).vaultUri, '/'), substring(reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))).vaultUri, 0, sub(length(reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))).vaultUri), 1)), reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))).vaultUri)]"
            }
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyVaultKeyName'))]"
        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2022-05-01",
        "name": "[variables('privateEndpointStorageBlobName')]",
        "location": "[parameters('location')]",
        "properties": {
          "subnet": {
            "id": "[resourceId(parameters('vnetNameRgName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
          },
          "privateLinkServiceConnections": [
            {
              "name": "storageBlobPrivateLinkConnection",
              "properties": {
                "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "groupIds": [
                  "blob"
                ]
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2022-05-01",
        "name": "[format('{0}/{1}', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "config",
              "properties": {
                "privateDnsZoneId": "[resourceId(parameters('blobPrivateDNSZoneResourceGroupName'), 'Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageBlobName'))]"
        ]
      }
      
      
    ]
  }